---
title: "Class 8: Breast Cancer Mini Project"
author: "Rahul Nedunuri (PID A16297840)"
format: pdf
editor: visual
---

Before we dive into the project lets try applying PCA to RNASeq data.


```{r}
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

Number of genes:
```{r}
nrow(rna.data)
```

## Run PCA

```{r}
pca <- prcomp(t(rna.data), scale=TRUE)
 
## Simple un polished plot of pc1 and pc2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
```

```{r}
summary(pca)
```
Together, PC1 and PC2 capture almost 95% of all variance in the data. Great!

```{r}
## Variance captured per PC 
pca.var <- pca$sdev^2

## Percent variance is often more informative to look at 
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
pca.var.per

barplot(pca.var.per, main="Scree Plot", 
        names.arg = paste0("PC", 1:10),
        xlab="Principal Component", ylab="Percent Variation")

```


```{r}
# We have 5 wt + 5 ko samples

mycols <- c(rep('blue', 5), rep('red', 5)) # use to color the PCA plot points

plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", col=mycols)


```

I could examine which genes contribute most to PC1...

```{r}
head(sort(abs(pca$rotation[,1]), decreasing=T))

```


# Analysis of Breast Cancer FNA Data

FNA (fine needle aspiration): biopsy method

## Exploratory Data Analysis

Gathering the data
```{r}
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"

# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
```

```{r}
head(wisc.df)
```

`wisc.df$diagnosis` is our expert medical diagnosis

Let's make a dataframe that excludes this diagnosis column
```{r}
wisc.data <- wisc.df[,-1]
head(wisc.data)
```
We should also store the diagnoses as a factor
```{r}
diagnosis <- factor(wisc.df[,1]) 
head(diagnosis)
```


> Q1. How many observations are in this dataset? 569 observations

```{r}
nrow(wisc.data)
```

569 observations are in this dataset.

> Q2. How many of the observations have a malignant diagnosis? 212 malignant diagnoses

```{r}
table(diagnosis)
```

212 observations have a malignant diagnosis. 

> Q3. How many variables/features in the data are suffixed with _mean? 10

```{r}
length(grep('_mean', names(wisc.data))) 
# use ,value=T, to find the names ending in _mean
```
10 variables in the data are suffixed with _mean.

## PCA

Looks like we need to scale the data. Here we will use `prcomp()` on the `wisc.data` object. 

First we have to decide whether to use the `scale=T` or `scale=F` argument.

We can look at the means and sd of each column. If they are similar then we are all good to go. 

Let's look at column means to see whether scaling is needed.
```{r}
colMeans(wisc.data)
```

```{r}

apply(wisc.data,2,sd)
```


We need to scale the data because the means and sd vary heavily in magnitude. 
```{r}
wisc.pr <- prcomp(wisc.data, scale=T)
summary(wisc.pr)
```

> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

44.27% of variance (much lower than earlier). This makes sense because data from patient samples expectedly have a lot of noise.

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

3 PCs. PC1-3 account for 72.6% of variance in the data. 

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7 PCs. PC1-7 account for 91% of variance in the data. 


```{r}
biplot(wisc.pr)
```
What a mess!

Let's try another plot of PC1 vs PC2. 
```{r}
plot(x=wisc.pr$x[,1], y=wisc.pr$x[,2] , col = diagnosis , 
     xlab = "PC1", ylab = "PC2")
```
This looks much more readable.

```{r}
library(ggplot2)

pc <- as.data.frame(wisc.pr$x)

ggplot(pc) +
  aes(PC1, PC2, col=diagnosis) +
  geom_point()
```
This is even better. 


> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

```{r}
ggplot(pc) +
  aes(PC1, PC3, col=diagnosis) +
  geom_point()
```
These plots have as many datapoints as initial observations. This is because each observation is given a score based on the PCs.


> Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

```{r}
wisc.pr$rotation['concave.points_mean',1]
```
-0.2608538 is the component of the loading vector for the feature concave.points_mean.

> Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

5 PCs explain 80% of the variance. 
```{r}
tbl <- summary(wisc.pr)
tbl$importance[3,]
```

## Hierarchical Clustering

The main function for hierarchical clustering is called `hclust()` which takes a distance matrix as input.

```{r}
d <- dist(scale(wisc.data))
wisc.hclust <- hclust(d)
plot(wisc.hclust)
abline(h=18, col="red")
grps <- cutree(wisc.hclust, h=18)
```
Let's see how our cluster grps correspond to malignancy (M or B diagnosis groups).

```{r}
table(grps)
```

## 5. Combining methods

Here we will perform clustering on PCA results rather than the original data. 

In other words, we will cluster using `wisc.pr$x` - our new better variables of PCs. We can choose as many or as few PCs to use as we like. 


```{r}
d.pc <- dist(wisc.pr$x[, 1:3])

wisc.pr.hclust <- hclust( d.pc, method="ward.D2" )
plot(wisc.pr.hclust)
abline(h=80, col='red')
```


```{r}
grps <- cutree(wisc.pr.hclust, h=80)
table(grps)
```

We can use the `table()` function to make a cross-table.
```{r}
table(diagnosis)
```

```{r}
table(grps, diagnosis)
```
From group 1, 179 were malignant and only 24 were benign. From group 2, 333 were benign and 33 were malignant. Cluster 1 mostly captures malignant (M) tumors while cluster 2 captures mainly benign masses/healthy patients (B).

## 7. Predict
```{r}
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc

```

```{r}
plot(wisc.pr$x[,1:2], col=grps)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

> Q18. Which of these new patients should we prioritize for follow up based on your results?

We should prioritize group 2, which is likely to contain patients with malignancies that were missed in the initial diagnosis. 
