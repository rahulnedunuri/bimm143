{
  "hash": "697ec971950fe14a158a0a0243ec3aa8",
  "result": {
    "markdown": "---\ntitle: \"Class06: R Functions\"\nauthor: \"Rahul Nedunuri (PID:A16297840)\"\nformat: html\ndate: 01/25/24\neditor: visual\n---\n\n\n## R Functions\n\nFunctions are how we get things done. We can call functions to avoid redundant code. Writing functions in R is doable.\n\nAll functions in R have at least three things:\n- **name** which we choose\n- **input args** aka the input to our function\n- **body** the main chunk of code\n\n`#| eval: false` will print code when rendered but won't run it if there is an error\n\nSilly first function to add 2 nums:\n\n::: {.cell}\n\n```{.r .cell-code}\naddme <- function(in1, in2=1) {\n  in1 + in2\n}\n```\n:::\n\n\n## Lab for today\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example input vectors to start with\nstudent1 <- c(100, 100, 100, 100, 100, 100, 100, 90)\nstudent2 <- c(100, NA, 90, 90, 90, 90, 97, 80)\nstudent3 <- c(90, NA, NA, NA, NA, NA, NA, NA)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(student1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 98.75\n```\n:::\n\n```{.r .cell-code}\nmean(student2, na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 91\n```\n:::\n\n```{.r .cell-code}\nmean(student3, na.rm=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 90\n```\n:::\n:::\n\nThis is not useful, student 3 shouldn't have an overall score of 90 if they missed 7 assignments. Problem with how we are dealing with NA\n\n\n::: {.cell}\n\n```{.r .cell-code}\nind <- which.min(student1)\nind\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\n8th index is position of minimum in student1's grades.\n\nCalculating mean after removing 8th index with `[-which.min()]`\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(student1[-ind])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\nWe found student1's grade after the drop.\n\nNow we can use a common shortcut and use `x` as the input.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- student1\nmean( x[ -which.min(x)])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\nWe still have the problem of missing values.\nOne idea is to replace NA values with 0. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- 1:5\ny[y==3] <- NA\nis.na(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE  TRUE FALSE FALSE\n```\n:::\n:::\n\nHow can I remove NA?\nI can flip logicals with `!`\n\n::: {.cell}\n\n```{.r .cell-code}\ny[is.na(y)] <- 0\n```\n:::\n\n\nLet's try it on student grades.\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- student3\n\n#Change NA values to 0\nx[is.na(x)] <- 0\nmean( x[ -which.min(x)])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 12.85714\n```\n:::\n:::\n\n\n## Q1: \nWrite a function grade() to determine an overall grade from a vector of student homework\nassignment scores dropping the lowest single score. If a student misses a homework (i.e. has an\nNA value) this can be used as a score to be potentially dropped. Your final function should be\nadquately explained with code comments and be able to work on an example class gradebook\nsuch as this one in CSV format: “https://tinyurl.com/gradeinput”\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# function grade(): determines grade by dropping the lowest single score\ngrade <- function(x) {\n  #Replace all NA values with zeroes\n  x[is.na(x)] <- 0\n  #Find mean after dropping min score\n  mean(x[-which.min(x)])\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read data from link to csv format\ngradebook = read.csv(\"https://tinyurl.com/gradeinput\", row.names = 1)\nhead(gradebook)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          hw1 hw2 hw3 hw4 hw5\nstudent-1 100  73 100  88  79\nstudent-2  85  64  78  89  78\nstudent-3  83  69  77 100  77\nstudent-4  88  NA  73 100  76\nstudent-5  88 100  75  86  79\nstudent-6  89  78 100  89  77\n```\n:::\n:::\n\nApply the `grade()` function to all students\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal <- apply(gradebook, 1, grade)\n```\n:::\n\n\n## Q2\nUsing your grade() function and the supplied gradebook, Who is the top scoring student\noverall in the gradebook?   \n**Ans: STUDENT18**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhighest = which.max(final)\nprint(highest)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nstudent-18 \n        18 \n```\n:::\n\n```{.r .cell-code}\nmax(final)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 94.5\n```\n:::\n:::\n\n\n## Q3\nFrom your analysis of the gradebook, which homework was toughest on students (i.e. obtained\nthe lowest scores overall?   \n**Ans: HW3 was the hardest**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhw <- apply(gradebook, 2, sum, na.rm=T)\nwhich.min(hw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nhw2 \n  2 \n```\n:::\n:::\n\n\n## Q4\nOptional Extension: From your analysis of the gradebook, which homework was most\npredictive of overall score (i.e. highest correlation with average grade score)?   \n**Ans: HW5**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make all NA values --> 0\nmask <- gradebook\nmask[ is.na(mask) ] <- 0\n```\n:::\n\n\nWe can use the `cor()` function for correlation analysis and use the apply function.\n\n::: {.cell}\n\n```{.r .cell-code}\napply(mask, 2, cor, final)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      hw1       hw2       hw3       hw4       hw5 \n0.4250204 0.1767780 0.3042561 0.3810884 0.6325982 \n```\n:::\n:::\n",
    "supporting": [
      "class06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}