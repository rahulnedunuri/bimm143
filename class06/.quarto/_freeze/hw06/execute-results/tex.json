{
  "hash": "850177206aebb266bdd086bdbf80bc55",
  "result": {
    "markdown": "---\ntitle: \"Hw06\"\nauthor: \"Rahul Nedunuri (PID:A16297840)\"\ndate: 01/25/24\nformat: pdf\n---\n\n\n## Q6: Optimization\nHere we will make a more robust version of the following code which analyzes a given protein's drug interactions and plots it...\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"bio3d\") \n# Can you improve this analysis code?\nlibrary(bio3d)\n\ns1 <- read.pdb(\"4AKE\") # kinase with drug\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Note: Accessing on-line PDB file\n```\n:::\n\n```{.r .cell-code}\ns2 <- read.pdb(\"1AKE\") # kinase no drug\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Note: Accessing on-line PDB file\n   PDB has ALT records, taking A only, rm.alt=TRUE\n```\n:::\n\n```{.r .cell-code}\ns3 <- read.pdb(\"1E4Y\") # kinase with drug\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Note: Accessing on-line PDB file\n```\n:::\n\n```{.r .cell-code}\ns1.chainA <- trim.pdb(s1, chain=\"A\", elety=\"CA\")\ns2.chainA <- trim.pdb(s2, chain=\"A\", elety=\"CA\")\ns3.chainA <- trim.pdb(s1, chain=\"A\", elety=\"CA\")\n\ns1.b <- s1.chainA$atom$b\ns2.b <- s2.chainA$atom$b\ns3.b <- s3.chainA$atom$b\n\nplotb3(s1.b, sse=s1.chainA, typ=\"l\", ylab=\"Bfactor\")\n```\n\n::: {.cell-output-display}\n![](hw06_files/figure-pdf/unnamed-chunk-1-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nplotb3(s2.b, sse=s2.chainA, typ=\"l\", ylab=\"Bfactor\")\n```\n\n::: {.cell-output-display}\n![](hw06_files/figure-pdf/unnamed-chunk-1-2.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nplotb3(s3.b, sse=s3.chainA, typ=\"l\", ylab=\"Bfactor\")\n```\n\n::: {.cell-output-display}\n![](hw06_files/figure-pdf/unnamed-chunk-1-3.pdf){fig-pos='H'}\n:::\n:::\n\n\nI will write a function that serves the same purpose as the above code and also is more concise and reusable. \nThe function will take an input of any given protein's 4 digit PDB code and outputs a plot outlining the drug B factor interactions plotted against specific residues of the protein.\n\n## Shortened code  \n\n`plotBfactor()`\n\n::: {.cell}\n\n```{.r .cell-code}\n#This function takes input prot which is the 4 letter PDB code\n#It will output a plot of Bfactor interactions vs amino acid residue position of prot\n\nplotBfactor <- function(prot) { \n  #input: prot = \"____\" PDB code\n  \n  s <- read.pdb(prot) #reads the argument PDB code\n  s.chainA <- trim.pdb(s, chain=\"A\", elety=\"CA\")\n  s.b <- s.chainA$atom$b\n  \n  #creates plot of Bfactor vs amino acid position of prot\n  plotb3(s.b, sse=s.chainA, typ=\"l\", ylab=\"Bfactor\")\n}\n```\n:::\n\n\n\nNow let's test our `plotBfactor()` function.\n\nTo use it, you just have to pass an existing 4 letter PDB code as a string argument to the function. The output will be a Bfactor vs Amino Acid Residue plot showing the relative mobility or rigidity of a protein. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Example: To generate plot for PDB code 3EK2\nplotBfactor(\"3EK2\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Note: Accessing on-line PDB file\n```\n:::\n\n::: {.cell-output-display}\n![](hw06_files/figure-pdf/unnamed-chunk-3-1.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Example: To generate plot for PDB code 7TR7\nplotBfactor(\"7TR7\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Note: Accessing on-line PDB file\n   PDB has ALT records, taking A only, rm.alt=TRUE\n```\n:::\n\n::: {.cell-output-display}\n![](hw06_files/figure-pdf/unnamed-chunk-4-1.pdf){fig-pos='H'}\n:::\n:::\n",
    "supporting": [
      "hw06_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}