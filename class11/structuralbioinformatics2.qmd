---
title: "Lab 11: Structural Bioinformatics (pt 2)"
author: "Rahul Nedunuri (PID: A16297840)"
format: pdf
editor: visual
---

AlphaFold has revolutionized protein structure prediction. It allows anybody with sufficient bioinformatics skills to predict the structure of virtually any protein.

We ran AlphaFold via GoogleCollab at: https://colab.research.google.com/github/sokrypton/ColabFold/blob/main/AlphaFold2.ipynb

In particular, we used their AlphaFold2_mmseqs2 version that uses mmseqs rather than HMMer for sequence searches.

The main outputs include a set of **PDB structure files** along with matching **JSON format files** which tell us the quality of the resulting models.

Let's start by loading these PDB structures up in Mol\*

```{r}
#BiocManager::install("msa")
library(bio3d)

#Specifies results directory
results_dir <- "hivpr1dimer_23119/"

pdb_files <- list.files(path=results_dir,
                        pattern="*.pdb",
                        full.names = TRUE)
basename(pdb_files)

```

```{r}
#MSA alignment and superimposition
pdbs <- pdbaln(pdb_files, fit=TRUE, exefile="msa")
```

## RMSD: Root mean square deviation

```{r}

rd <- rmsd(pdbs, fit=T) #measures physical distances of atoms
range(rd)

```

```{r}
#install.packages("pheatmap")
library(pheatmap)

colnames(rd) <- paste0("m",1:5)
rownames(rd) <- paste0("m",1:5)
pheatmap(rd)
```

```{r}
pdb <- read.pdb("1hsg")
plotb3(pdbs$b[1,], typ="l", lwd=2, sse=pdb)
points(pdbs$b[2,], typ="l", col="red")
points(pdbs$b[3,], typ="l", col="blue")
points(pdbs$b[4,], typ="l", col="darkgreen")
points(pdbs$b[5,], typ="l", col="orange")
abline(v=100, col="gray")

```

```{r}

core <- core.find(pdbs)
core.inds <- print(core, vol=0.5)
xyz <- pdbfit(pdbs, core.inds, outpath="corefit_structures")

```

```{r}
rf <- rmsf(xyz)

plotb3(rf, sse=pdb)
abline(v=100, col="gray", ylab="RMSF")
```

If the predicted model has more than 1 domain, each domain may have high confidence, yet the relative positions of the domains may not. The estimated reliability of relative domain positions is in graphs of predicted aligned error (PAE) which are included in the downloadable zip files and analyzed in R above.

## Predicted Aligned Error (PAE) for domains:

-   **lower = better structure**

```{r}
#install.packages("jsonlite")
library(jsonlite)

# Listing of all PAE JSON files
pae_files <- list.files(path=results_dir,
                        pattern=".*model.*\\.json",
                        full.names = TRUE)


pae1 <- read_json(pae_files[1],simplifyVector = TRUE)

pae2 <- read_json(pae_files[2],simplifyVector = TRUE)
pae3 <- read_json(pae_files[3],simplifyVector = TRUE)
pae4 <- read_json(pae_files[4],simplifyVector = TRUE)
pae5 <- read_json(pae_files[5],simplifyVector = TRUE)

```

```{r}
head(pae1$plddt) 
```


```{r}
paste("model 1:", pae1$max_pae)
paste("model 2:", pae2$max_pae)
paste("model 3:", pae3$max_pae)
paste("model 4:", pae4$max_pae)
paste("model 5:", pae5$max_pae)
```

For model 1
```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```

For model 5
```{r}
plot.dmat(pae5$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```


```{r}
aln_file <- list.files(path=results_dir,
                       pattern=".a3m$",
                        full.names = TRUE)
aln_file

```

```{r}
aln <- read.fasta(aln_file[1], to.upper = TRUE)

```

```{r}
dim(aln$ali)
```

```{r}
sim <- conserv(aln)
```


```{r}
plotb3(sim[1:99], sse=trim.pdb(pdb, chain="A"),
       ylab="Conservation Score")
```
Conserved residues
```{r}
con <- consensus(aln, cutoff = 0.9)
con$seq
```

